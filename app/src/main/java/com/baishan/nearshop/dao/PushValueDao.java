package com.baishan.nearshop.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.baishan.nearshop.model.PushValue;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PUSH_VALUE".
*/
public class PushValueDao extends AbstractDao<PushValue, Long> {

    public static final String TABLENAME = "PUSH_VALUE";

    /**
     * Properties of entity PushValue.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderState = new Property(1, int.class, "OrderState", false, "ORDER_STATE");
        public final static Property OrderNo = new Property(2, String.class, "OrderNo", false, "ORDER_NO");
        public final static Property LinkType = new Property(3, int.class, "LinkType", false, "LINK_TYPE");
        public final static Property LinkValue = new Property(4, String.class, "LinkValue", false, "LINK_VALUE");
    }


    public PushValueDao(DaoConfig config) {
        super(config);
    }
    
    public PushValueDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PUSH_VALUE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ORDER_STATE\" INTEGER NOT NULL ," + // 1: OrderState
                "\"ORDER_NO\" TEXT," + // 2: OrderNo
                "\"LINK_TYPE\" INTEGER NOT NULL ," + // 3: LinkType
                "\"LINK_VALUE\" TEXT);"); // 4: LinkValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PUSH_VALUE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PushValue entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOrderState());
 
        String OrderNo = entity.getOrderNo();
        if (OrderNo != null) {
            stmt.bindString(3, OrderNo);
        }
        stmt.bindLong(4, entity.getLinkType());
 
        String LinkValue = entity.getLinkValue();
        if (LinkValue != null) {
            stmt.bindString(5, LinkValue);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PushValue entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOrderState());
 
        String OrderNo = entity.getOrderNo();
        if (OrderNo != null) {
            stmt.bindString(3, OrderNo);
        }
        stmt.bindLong(4, entity.getLinkType());
 
        String LinkValue = entity.getLinkValue();
        if (LinkValue != null) {
            stmt.bindString(5, LinkValue);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PushValue readEntity(Cursor cursor, int offset) {
        PushValue entity = new PushValue( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // OrderState
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // OrderNo
            cursor.getInt(offset + 3), // LinkType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // LinkValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PushValue entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderState(cursor.getInt(offset + 1));
        entity.setOrderNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLinkType(cursor.getInt(offset + 3));
        entity.setLinkValue(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PushValue entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PushValue entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PushValue entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
